// Generated by CoffeeScript 1.10.0
var wrapperObject;

console.log('executing test cases ::');

wrapperObject = this;

describe('Template test cases Suite 1 :: simple string parsing', function() {
  it('simple string, no JS', function() {
    var _t, string;
    string = '<div>Simple Div</div>\n<div>Simple Div 2</div>';
    _t = Template.parse(string);
    return expect(_t()).toBe('<div>Simple Div</div><div>Simple Div 2</div>');
  });
  it('will return me a simple string', function() {
    var string;
    string = '<div>Simple Div</div>\n<div>?_ value _? Simple Div 2</div>';
    return expect(Template.parse(string)({
      value: 10
    })).toBe('<div>Simple Div</div><div>10 Simple Div 2</div>');
  });
  it('will return me a complex structure string', function() {
    var _t, string;
    string = '<div>\n    complex Div : ?_ name _? ?_ last_name _?\n    <div>Simple Div 2</div>\n<div>';
    _t = Template.parse(string);
    return expect(_t({
      name: 'Ass',
      last_name: 'Lame'
    })).toBe('<div>    complex Div : Ass Lame    <div>Simple Div 2</div><div>');
  });
  return it('declaring new var, printing it', function() {
    var _t, string;
    string = '?__ someVar = 20; __?\n?__ var someVar2 __?\n?__ var someVar3 __?\n<h2>?_ someVar _?</h2>';
    _t = Template.parse(string);
    return expect(_t({})).toBe('<h2>20</h2>');
  });
});

describe('Template test cases Suite 2 :: More complex structures : Arrays', function() {
  it('a simple numbered loop', function() {
    var _t, string;
    string = '?__ var limit = 10; __?\n?__ for (var i = 0; i < limit; i++) { __?\n    <lame>?_ i _?</lame>\n?__ } __?';
    _t = Template.parse(string);
    return expect(_t({})).toBe('<lame>0</lame>    <lame>1</lame>    <lame>2</lame>    <lame>3</lame>    <lame>4</lame>    <lame>5</lame>    <lame>6</lame>    <lame>7</lame>    <lame>8</lame>    <lame>9</lame>');
  });
  return it('loop on an array', function() {
    var _t, string;
    string = '?__ arr = [0,1,2,3,4,5,6,7,8,9]; __?\n?__ for (var i = 0; i < arr.length; i++) { __?\n    <lame>?_ arr[i] _?</lame>\n?__ } __?';
    _t = Template.parse(string);
    return expect(_t({})).toBe('<lame>0</lame>    <lame>1</lame>    <lame>2</lame>    <lame>3</lame>    <lame>4</lame>    <lame>5</lame>    <lame>6</lame>    <lame>7</lame>    <lame>8</lame>    <lame>9</lame>');
  });
});

describe('Template test cases Suite 3 :: More complex structures : Functions', function() {
  it('passing and calling functions', function() {
    var string, string2;
    string = '?_ abs(090.990) _?';
    string2 = '?_ abs(-90.990) _?';
    expect(Template.parse(string, Math)).toBe('90.99');
    return expect(Template.parse(string2, Math)).toBe('90.99');
  });
  return it('passing and calling functions, different scope', function() {
    var string;
    string = '?_ abs(090.990) _? ?_ Temp.myFunc() _?';
    wrapperObject.Temp = {
      myFunc: function() {
        return 'tmp string';
      }
    };
    return expect(Template.parse(string, Math)).toBe('90.99 tmp string');
  });
});
